#!/bin/bash

#=============================================================================
# FFT IP Synthesis Optimization Test Script
#=============================================================================
# Description: Script to test memory optimizations and validate synthesis results
# Author:      Vyges IP Development Team
# Date:        2025-08-11
# License:     Apache-2.0
#=============================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
RTL_DIR="$PROJECT_ROOT/rtl"
TB_DIR="$PROJECT_ROOT/tb/sv_tb"
SYNTH_DIR="$PROJECT_ROOT/flow/yosys"
REPORTS_DIR="$PROJECT_ROOT/flow/yosys/reports"

# Test configuration
TEST_MODULES=(
    "memory_interface"
    "twiddle_rom"
    "fft_control"
)

# Expected results
EXPECTED_MEMORY_CELLS=1000    # Should be ~1000-2000 cells (down from 67,754)
EXPECTED_ROM_CELLS=2000       # Should be ~2000-4000 cells (up from 85)
EXPECTED_TOTAL_CELLS=15000    # Should be ~10,000-15,000 cells (down from 74,217)

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "INFO") echo -e "${BLUE}[INFO]${NC} $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $message" ;;
        "WARNING") echo -e "${YELLOW}[WARNING]${NC} $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $message" ;;
    esac
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check dependencies
check_dependencies() {
    print_status "INFO" "Checking dependencies..."
    
    local missing_deps=()
    
    if ! command_exists yosys; then
        missing_deps+=("yosys")
    fi
    
    if ! command_exists iverilog; then
        missing_deps+=("iverilog")
    fi
    
    if ! command_exists vvp; then
        missing_deps+=("vvp")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_status "ERROR" "Missing dependencies: ${missing_deps[*]}"
        print_status "INFO" "Please install missing tools and try again"
        exit 1
    fi
    
    print_status "SUCCESS" "All dependencies available"
}

# Function to create synthesis test files
create_synthesis_tests() {
    print_status "INFO" "Creating synthesis test files..."
    
    # Create individual synthesis scripts for each module
    for module in "${TEST_MODULES[@]}"; do
        create_module_synthesis_script "$module"
    done
    
    # Create comprehensive synthesis script
    create_comprehensive_synthesis_script
    
    print_status "SUCCESS" "Synthesis test files created"
}

# Function to create module synthesis script
create_module_synthesis_script() {
    local module=$1
    local script_file="$SYNTH_DIR/synth_${module}_test.tcl"
    
    cat > "$script_file" << EOF
# Yosys synthesis script for ${module} optimization test
# Generated by test_synthesis_optimization.sh

# Read RTL files
read_verilog -sv $RTL_DIR/${module}.sv

# Set top module
hierarchy -top ${module}

# Generic synthesis
proc
opt
memory
opt

# Technology mapping
techmap
abc -g AND,NAND,OR,NOR,NOT,BUF,XNOR,XOR

# Statistics
stat

# Write netlist
write_verilog $SYNTH_DIR/${module}_synth.v
write_json $SYNTH_DIR/${module}_synth.json

# Generate detailed report
tee -o $REPORTS_DIR/${module}_synthesis_report.txt stat
EOF
    
    chmod +x "$script_file"
}

# Function to create comprehensive synthesis script
create_comprehensive_synthesis_script() {
    local script_file="$SYNTH_DIR/synth_comprehensive_test.tcl"
    
    cat > "$script_file" << EOF
# Yosys comprehensive synthesis script for FFT IP optimization test
# Generated by test_synthesis_optimization.sh

# Read all RTL files
read_verilog -sv $RTL_DIR/memory_interface.sv
read_verilog -sv $RTL_DIR/twiddle_rom.sv
read_verilog -sv $RTL_DIR/fft_control.sv

# Set top module (assuming fft_control is top)
hierarchy -top fft_control

# Generic synthesis
proc
opt
memory
opt

# Technology mapping
techmap
abc -g AND,NAND,OR,NOR,NOT,BUF,XNOR,XOR

# Statistics
stat

# Write netlist
write_verilog $SYNTH_DIR/fft_ip_comprehensive_synth.v
write_json $SYNTH_DIR/fft_ip_comprehensive_synth.json

# Generate detailed report
tee -o $REPORTS_DIR/comprehensive_synthesis_report.txt stat
EOF
    
    chmod +x "$script_file"
}

# Function to run synthesis tests
run_synthesis_tests() {
    print_status "INFO" "Running synthesis tests..."
    
    cd "$SYNTH_DIR"
    
    # Test individual modules
    for module in "${TEST_MODULES[@]}"; do
        print_status "INFO" "Testing ${module} synthesis..."
        run_module_synthesis "$module"
    done
    
    # Test comprehensive synthesis
    print_status "INFO" "Testing comprehensive synthesis..."
    run_comprehensive_synthesis
    
    cd "$PROJECT_ROOT"
}

# Function to run module synthesis
run_module_synthesis() {
    local module=$1
    local script_file="synth_${module}_test.tcl"
    local report_file="$REPORTS_DIR/${module}_synthesis_report.txt"
    
    if [ ! -f "$script_file" ]; then
        print_status "ERROR" "Synthesis script not found: $script_file"
        return 1
    fi
    
    print_status "INFO" "Running synthesis for ${module}..."
    
    if yosys -q "$script_file"; then
        print_status "SUCCESS" "${module} synthesis completed"
        analyze_synthesis_results "$module" "$report_file"
    else
        print_status "ERROR" "${module} synthesis failed"
        return 1
    fi
}

# Function to run comprehensive synthesis
run_comprehensive_synthesis() {
    local script_file="synth_comprehensive_test.tcl"
    local report_file="$REPORTS_DIR/comprehensive_synthesis_report.txt"
    
    if [ ! -f "$script_file" ]; then
        print_status "ERROR" "Comprehensive synthesis script not found: $script_file"
        return 1
    fi
    
    print_status "INFO" "Running comprehensive synthesis..."
    
    if yosys -q "$script_file"; then
        print_status "SUCCESS" "Comprehensive synthesis completed"
        analyze_synthesis_results "comprehensive" "$report_file"
    else
        print_status "ERROR" "Comprehensive synthesis failed"
        return 1
    fi
}

# Function to analyze synthesis results
analyze_synthesis_results() {
    local module=$1
    local report_file=$2
    
    if [ ! -f "$report_file" ]; then
        print_status "WARNING" "Synthesis report not found: $report_file"
        return
    fi
    
    print_status "INFO" "Analyzing ${module} synthesis results..."
    
    # Extract cell count
    local cell_count=$(grep -E "Number of cells:" "$report_file" | awk '{print $4}' | head -1)
    
    if [ -n "$cell_count" ]; then
        print_status "INFO" "${module} cell count: $cell_count"
        
        # Compare with expected results
        case $module in
            "memory_interface")
                if [ "$cell_count" -lt "$EXPECTED_MEMORY_CELLS" ]; then
                    print_status "SUCCESS" "Memory interface optimization successful: $cell_count < $EXPECTED_MEMORY_CELLS"
                else
                    print_status "WARNING" "Memory interface cell count higher than expected: $cell_count >= $EXPECTED_MEMORY_CELLS"
                fi
                ;;
            "twiddle_rom")
                if [ "$cell_count" -gt "$EXPECTED_ROM_CELLS" ]; then
                    print_status "SUCCESS" "Twiddle ROM optimization successful: $cell_count > $EXPECTED_ROM_CELLS"
                else
                    print_status "WARNING" "Twiddle ROM cell count lower than expected: $cell_count <= $EXPECTED_ROM_CELLS"
                fi
                ;;
            "comprehensive")
                if [ "$cell_count" -lt "$EXPECTED_TOTAL_CELLS" ]; then
                    print_status "SUCCESS" "Overall optimization successful: $cell_count < $EXPECTED_TOTAL_CELLS"
                else
                    print_status "WARNING" "Overall cell count higher than expected: $cell_count >= $EXPECTED_TOTAL_CELLS"
                fi
                ;;
        esac
    else
        print_status "WARNING" "Could not extract cell count from report"
    fi
}

# Function to run simulation tests
run_simulation_tests() {
    print_status "INFO" "Running simulation tests..."
    
    cd "$TB_DIR"
    
    # Test memory interface
    if [ -f "tb_memory_interface_opt.sv" ]; then
        print_status "INFO" "Testing memory interface optimization..."
        run_simulation_test "tb_memory_interface_opt.sv" "memory_interface_opt"
    fi
    
    # Test twiddle ROM
    if [ -f "tb_twiddle_rom_symmetry.sv" ]; then
        print_status "INFO" "Testing twiddle ROM symmetry optimization..."
        run_simulation_test "tb_twiddle_rom_symmetry.sv" "twiddle_rom_symmetry"
    fi
    
    cd "$PROJECT_ROOT"
}

# Function to run simulation test
run_simulation_test() {
    local test_file=$1
    local test_name=$2
    
    print_status "INFO" "Compiling and running $test_name..."
    
    # Compile testbench
    if iverilog -g2012 -o "${test_name}.vvp" "$test_file" "$RTL_DIR"/*.sv; then
        print_status "SUCCESS" "$test_name compilation successful"
        
        # Run simulation
        if vvp "${test_name}.vvp"; then
            print_status "SUCCESS" "$test_name simulation completed"
        else
            print_status "ERROR" "$test_name simulation failed"
        fi
        
        # Cleanup
        rm -f "${test_name}.vvp"
    else
        print_status "ERROR" "$test_name compilation failed"
    fi
}

# Function to generate optimization report
generate_optimization_report() {
    print_status "INFO" "Generating optimization report..."
    
    local report_file="$REPORTS_DIR/memory_optimization_report.md"
    
    cat > "$report_file" << EOF
# FFT IP Memory Optimization Report

## Test Summary
- **Test Date**: $(date)
- **Test Script**: test_synthesis_optimization.sh
- **Test Modules**: ${TEST_MODULES[*]}

## Expected Results
- **Memory Interface**: < $EXPECTED_MEMORY_CELLS cells (down from 67,754)
- **Twiddle ROM**: > $EXPECTED_ROM_CELLS cells (up from 85)
- **Total Design**: < $EXPECTED_TOTAL_CELLS cells (down from 74,217)

## Test Results
$(for module in "${TEST_MODULES[@]}"; do
    local report="$REPORTS_DIR/${module}_synthesis_report.txt"
    if [ -f "$report" ]; then
        echo "- **${module}**: $(grep -E "Number of cells:" "$report" | awk '{print $4}' | head -1) cells"
    else
        echo "- **${module}**: Report not available"
    fi
done)

## Optimization Summary
- **Memory Interface**: Synthesis attributes applied (ram_style = 'block')
- **Memory Size**: Corrected from 65536×32-bit to 2048×32-bit (64K bits)
- **Address Width**: Optimized from 16-bit to 11-bit
- **Twiddle ROM**: Symmetry optimization implemented (4x size reduction)
- **ROM Size**: Reduced from 2048×32-bit to 1024×16-bit (4K bits)

## Recommendations
1. Verify synthesis reports for memory macro usage
2. Check timing constraints for optimized design
3. Validate functionality with comprehensive simulation
4. Compare gate count with previous baseline

## Next Steps
1. Run physical synthesis with vendor tools
2. Implement memory generators for production
3. Add advanced symmetry optimizations
4. Optimize for specific target technology
EOF
    
    print_status "SUCCESS" "Optimization report generated: $report_file"
}

# Function to cleanup test files
cleanup_test_files() {
    print_status "INFO" "Cleaning up test files..."
    
    cd "$SYNTH_DIR"
    
    # Remove test synthesis scripts
    for module in "${TEST_MODULES[@]}"; do
        rm -f "synth_${module}_test.tcl"
    done
    
    # Remove comprehensive synthesis script
    rm -f "synth_comprehensive_test.tcl"
    
    # Remove test netlists
    for module in "${TEST_MODULES[@]}"; do
        rm -f "${module}_synth.v"
        rm -f "${module}_synth.json"
    done
    
    rm -f "fft_ip_comprehensive_synth.v"
    rm -f "fft_ip_comprehensive_synth.json"
    
    cd "$PROJECT_ROOT"
    
    print_status "SUCCESS" "Test files cleaned up"
}

# Main execution
main() {
    print_status "INFO" "Starting FFT IP Synthesis Optimization Test"
    print_status "INFO" "Project Root: $PROJECT_ROOT"
    print_status "INFO" "Script Directory: $SCRIPT_DIR"
    
    # Create necessary directories
    mkdir -p "$SYNTH_DIR"
    mkdir -p "$REPORTS_DIR"
    
    # Check dependencies
    check_dependencies
    
    # Create synthesis tests
    create_synthesis_tests
    
    # Run synthesis tests
    run_synthesis_tests
    
    # Run simulation tests
    run_simulation_tests
    
    # Generate report
    generate_optimization_report
    
    # Cleanup (optional - comment out to keep files for inspection)
    # cleanup_test_files
    
    print_status "SUCCESS" "FFT IP Synthesis Optimization Test completed successfully!"
    print_status "INFO" "Check reports in: $REPORTS_DIR"
}

# Run main function
main "$@"
