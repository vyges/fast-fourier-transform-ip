
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Running command `read_verilog -sv ../../rtl/scale_factor_tracker.sv; hierarchy -top scale_factor_tracker; synth -top scale_factor_tracker; stat' --

1. Executing Verilog-2005 frontend: ../../rtl/scale_factor_tracker.sv
Parsing SystemVerilog input from `../../rtl/scale_factor_tracker.sv' to AST representation.
Generating RTLIL representation for module `\scale_factor_tracker'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \scale_factor_tracker

2.2. Analyzing design hierarchy..
Top module:  \scale_factor_tracker
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \scale_factor_tracker

3.1.2. Analyzing design hierarchy..
Top module:  \scale_factor_tracker
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$../../rtl/scale_factor_tracker.sv:54$1 in module scale_factor_tracker.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n_i in `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
     1/7: $0\tracking_active_reg[0:0]
     2/7: $0\scale_factor_overflow_reg[0:0]
     3/7: $0\max_overflow_magnitude_reg[7:0]
     4/7: $0\last_overflow_stage_reg[7:0]
     5/7: $0\overflow_count_reg[7:0]
     6/7: $0\stage_count_reg[7:0]
     7/7: $0\scale_factor_reg[7:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\scale_factor_tracker.\scale_factor_reg' using process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
  created $adff cell `$procdff$62' with positive edge clock and negative level reset.
Creating register for signal `\scale_factor_tracker.\stage_count_reg' using process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
  created $adff cell `$procdff$63' with positive edge clock and negative level reset.
Creating register for signal `\scale_factor_tracker.\overflow_count_reg' using process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
  created $adff cell `$procdff$64' with positive edge clock and negative level reset.
Creating register for signal `\scale_factor_tracker.\last_overflow_stage_reg' using process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
  created $adff cell `$procdff$65' with positive edge clock and negative level reset.
Creating register for signal `\scale_factor_tracker.\max_overflow_magnitude_reg' using process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
  created $adff cell `$procdff$66' with positive edge clock and negative level reset.
Creating register for signal `\scale_factor_tracker.\scale_factor_overflow_reg' using process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
  created $adff cell `$procdff$67' with positive edge clock and negative level reset.
Creating register for signal `\scale_factor_tracker.\tracking_active_reg' using process `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
  created $adff cell `$procdff$68' with positive edge clock and negative level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
Removing empty process `scale_factor_tracker.$proc$../../rtl/scale_factor_tracker.sv:54$1'.
Cleaned up 6 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 1 unused cells and 30 unused wires.
<suppressed ~2 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module scale_factor_tracker...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \scale_factor_tracker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \scale_factor_tracker.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \scale_factor_tracker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \scale_factor_tracker.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$68 ($adff) from module scale_factor_tracker (D = \scale_track_en_i, Q = \tracking_active_reg).
Adding EN signal on $procdff$67 ($adff) from module scale_factor_tracker (D = $0\scale_factor_overflow_reg[0:0], Q = \scale_factor_overflow_reg).
Adding EN signal on $procdff$66 ($adff) from module scale_factor_tracker (D = $0\max_overflow_magnitude_reg[7:0], Q = \max_overflow_magnitude_reg).
Adding EN signal on $procdff$65 ($adff) from module scale_factor_tracker (D = $0\last_overflow_stage_reg[7:0], Q = \last_overflow_stage_reg).
Adding EN signal on $procdff$64 ($adff) from module scale_factor_tracker (D = $0\overflow_count_reg[7:0], Q = \overflow_count_reg).
Adding EN signal on $procdff$63 ($adff) from module scale_factor_tracker (D = $0\stage_count_reg[7:0], Q = \stage_count_reg).
Adding EN signal on $procdff$62 ($adff) from module scale_factor_tracker (D = $0\scale_factor_reg[7:0], Q = \scale_factor_reg).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.
<suppressed ~6 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \scale_factor_tracker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \scale_factor_tracker.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \scale_factor_tracker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \scale_factor_tracker.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.8.23. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell scale_factor_tracker.$add$../../rtl/scale_factor_tracker.sv:76$5 ($add).
Removed top 24 bits (of 32) from port Y of cell scale_factor_tracker.$add$../../rtl/scale_factor_tracker.sv:76$5 ($add).
Removed top 31 bits (of 32) from port B of cell scale_factor_tracker.$add$../../rtl/scale_factor_tracker.sv:82$6 ($add).
Removed top 24 bits (of 32) from port Y of cell scale_factor_tracker.$add$../../rtl/scale_factor_tracker.sv:82$6 ($add).
Removed top 31 bits (of 32) from port B of cell scale_factor_tracker.$add$../../rtl/scale_factor_tracker.sv:92$8 ($add).
Removed top 24 bits (of 32) from port Y of cell scale_factor_tracker.$add$../../rtl/scale_factor_tracker.sv:92$8 ($add).
Removed top 1 bits (of 4) from port B of cell scale_factor_tracker.$auto$opt_dff.cc:195:make_patterns_logic$83 ($ne).
Removed top 1 bits (of 4) from port B of cell scale_factor_tracker.$auto$opt_dff.cc:195:make_patterns_logic$113 ($ne).
Removed top 24 bits (of 32) from wire scale_factor_tracker.$add$../../rtl/scale_factor_tracker.sv:76$5_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module scale_factor_tracker:
  creating $macc model for $add$../../rtl/scale_factor_tracker.sv:76$5 ($add).
  creating $macc model for $add$../../rtl/scale_factor_tracker.sv:82$6 ($add).
  creating $macc model for $add$../../rtl/scale_factor_tracker.sv:92$8 ($add).
  creating $alu model for $macc $add$../../rtl/scale_factor_tracker.sv:92$8.
  creating $alu model for $macc $add$../../rtl/scale_factor_tracker.sv:82$6.
  creating $alu model for $macc $add$../../rtl/scale_factor_tracker.sv:76$5.
  creating $alu model for $gt$../../rtl/scale_factor_tracker.sv:85$7 ($gt): new $alu
  creating $alu model for $lt$../../rtl/scale_factor_tracker.sv:75$4 ($lt): new $alu
  creating $alu cell for $lt$../../rtl/scale_factor_tracker.sv:75$4: $auto$alumacc.cc:485:replace_alu$121
  creating $alu cell for $gt$../../rtl/scale_factor_tracker.sv:85$7: $auto$alumacc.cc:485:replace_alu$126
  creating $alu cell for $add$../../rtl/scale_factor_tracker.sv:76$5: $auto$alumacc.cc:485:replace_alu$137
  creating $alu cell for $add$../../rtl/scale_factor_tracker.sv:82$6: $auto$alumacc.cc:485:replace_alu$140
  creating $alu cell for $add$../../rtl/scale_factor_tracker.sv:92$8: $auto$alumacc.cc:485:replace_alu$143
  created 5 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.
<suppressed ~3 debug messages>

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \scale_factor_tracker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \scale_factor_tracker.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \scale_factor_tracker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \scale_factor_tracker.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.
<suppressed ~15 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.
<suppressed ~1 debug messages>

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \scale_factor_tracker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \scale_factor_tracker.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~439 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.
<suppressed ~210 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
<suppressed ~105 debug messages>
Removed a total of 35 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 43 unused cells and 239 unused wires.
<suppressed ~44 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\scale_factor_tracker' to `<abc-temp-dir>/input.blif'..
Extracted 164 gates and 218 wires to a netlist network with 53 inputs and 46 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:                OR cells:        8
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               AND cells:        8
ABC RESULTS:               NOR cells:        4
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:              NAND cells:       16
ABC RESULTS:               XOR cells:       15
ABC RESULTS:            ANDNOT cells:       69
ABC RESULTS:        internal signals:      119
ABC RESULTS:           input signals:       53
ABC RESULTS:          output signals:       46
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module scale_factor_tracker.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\scale_factor_tracker'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \scale_factor_tracker..
Removed 0 unused cells and 153 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \scale_factor_tracker

3.24.2. Analyzing design hierarchy..
Top module:  \scale_factor_tracker
Removed 0 unused modules.

3.25. Printing statistics.

=== scale_factor_tracker ===

   Number of wires:                134
   Number of wire bits:            253
   Number of public wires:          23
   Number of public wire bits:     107
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                188
     $_ANDNOT_                      69
     $_AND_                          8
     $_DFFE_PN0P_                   42
     $_MUX_                          2
     $_NAND_                        16
     $_NOR_                          4
     $_NOT_                          1
     $_ORNOT_                        9
     $_OR_                           8
     $_XNOR_                        14
     $_XOR_                         15

3.26. Executing CHECK pass (checking for obvious problems).
Checking module scale_factor_tracker...
Found and reported 0 problems.

4. Printing statistics.

=== scale_factor_tracker ===

   Number of wires:                134
   Number of wire bits:            253
   Number of public wires:          23
   Number of public wire bits:     107
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                188
     $_ANDNOT_                      69
     $_AND_                          8
     $_DFFE_PN0P_                   42
     $_MUX_                          2
     $_NAND_                        16
     $_NOR_                          4
     $_NOT_                          1
     $_ORNOT_                        9
     $_OR_                           8
     $_XNOR_                        14
     $_XOR_                         15

End of script. Logfile hash: b63a47fa75, CPU: user 0.17s system 0.01s, MEM: 14.44 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 26% 1x abc (0 sec), 19% 18x opt_expr (0 sec), ...
