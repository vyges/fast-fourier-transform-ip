Testing memory_interface synthesis with BRAM inference...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Parsing `../../rtl/memory_interface.sv' using frontend ` -sv' --

1. Executing Verilog-2005 frontend: ../../rtl/memory_interface.sv
Parsing SystemVerilog input from `../../rtl/memory_interface.sv' to AST representation.
Storing AST representation for module `$abstract\memory_interface'.
Successfully finished Verilog frontend.

-- Executing script file `synth_bram_yosys.ys' --

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing AST frontend in derive mode using pre-parsed AST for module `\memory_interface'.
Generating RTLIL representation for module `\memory_interface'.

3.1. Analyzing design hierarchy..
Top module:  \memory_interface

3.2. Analyzing design hierarchy..
Top module:  \memory_interface
Removing unused module `$abstract\memory_interface'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../../rtl/memory_interface.sv:282$31 in module memory_interface.
Marked 1 switch rules as full_case in process $proc$../../rtl/memory_interface.sv:274$24 in module memory_interface.
Marked 1 switch rules as full_case in process $proc$../../rtl/memory_interface.sv:265$21 in module memory_interface.
Marked 1 switch rules as full_case in process $proc$../../rtl/memory_interface.sv:0$15 in module memory_interface.
Marked 1 switch rules as full_case in process $proc$../../rtl/memory_interface.sv:149$11 in module memory_interface.
Marked 4 switch rules as full_case in process $proc$../../rtl/memory_interface.sv:0$5 in module memory_interface.
Marked 1 switch rules as full_case in process $proc$../../rtl/memory_interface.sv:108$3 in module memory_interface.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 13 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n_i in `\memory_interface.$proc$../../rtl/memory_interface.sv:282$31'.
Found async reset \preset_n_i in `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
Found async reset \preset_n_i in `\memory_interface.$proc$../../rtl/memory_interface.sv:108$3'.

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~9 debug messages>

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:282$31'.
     1/1: $0\mem_ready_reg[0:0]
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:274$24'.
     1/3: $1$memwr$\fft_memory$../../rtl/memory_interface.sv:276$2_EN[31:0]$30
     2/3: $1$memwr$\fft_memory$../../rtl/memory_interface.sv:276$2_DATA[31:0]$29
     3/3: $1$memwr$\fft_memory$../../rtl/memory_interface.sv:276$2_ADDR[10:0]$28
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:265$21'.
     1/1: $0\mem_data_o[31:0]
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$15'.
     1/1: $1\prdata_o[31:0]
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
     1/6: $0\rescale_ctrl_reg[31:0]
     2/6: $0\int_enable_reg[31:0]
     3/6: $0\buffer_sel_reg[31:0]
     4/6: $0\fft_length_reg[31:0]
     5/6: $0\fft_config_reg[31:0]
     6/6: $0\fft_ctrl_reg[31:0]
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$5'.
     1/4: $4\apb_next_state[1:0]
     2/4: $3\apb_next_state[1:0]
     3/4: $2\apb_next_state[1:0]
     4/4: $1\apb_next_state[1:0]
Creating decoders for process `\memory_interface.$proc$../../rtl/memory_interface.sv:108$3'.
     1/1: $0\apb_state[1:0]

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\memory_interface.\fft_status_reg' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.\int_status_reg' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.\scale_factor_reg' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.\overflow_status_reg' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.$unnamed_block$1.overflow_count_val' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.$unnamed_block$1.stage_count_val' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.$unnamed_block$1.scale_factor_val' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.$unnamed_block$1.int_status_val' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
No latch inferred for signal `\memory_interface.\prdata_o' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$15'.
No latch inferred for signal `\memory_interface.\apb_next_state' from process `\memory_interface.$proc$../../rtl/memory_interface.sv:0$5'.

4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\memory_interface.\mem_ready_reg' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:282$31'.
  created $adff cell `$procdff$126' with positive edge clock and negative level reset.
Creating register for signal `\memory_interface.$memwr$\fft_memory$../../rtl/memory_interface.sv:276$2_ADDR' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:274$24'.
  created $dff cell `$procdff$127' with positive edge clock.
Creating register for signal `\memory_interface.$memwr$\fft_memory$../../rtl/memory_interface.sv:276$2_DATA' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:274$24'.
  created $dff cell `$procdff$128' with positive edge clock.
Creating register for signal `\memory_interface.$memwr$\fft_memory$../../rtl/memory_interface.sv:276$2_EN' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:274$24'.
  created $dff cell `$procdff$129' with positive edge clock.
Creating register for signal `\memory_interface.\mem_data_o' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:265$21'.
  created $dff cell `$procdff$130' with positive edge clock.
Creating register for signal `\memory_interface.\fft_ctrl_reg' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
  created $adff cell `$procdff$131' with positive edge clock and negative level reset.
Creating register for signal `\memory_interface.\fft_config_reg' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
  created $adff cell `$procdff$132' with positive edge clock and negative level reset.
Creating register for signal `\memory_interface.\fft_length_reg' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
  created $adff cell `$procdff$133' with positive edge clock and negative level reset.
Creating register for signal `\memory_interface.\buffer_sel_reg' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
  created $adff cell `$procdff$134' with positive edge clock and negative level reset.
Creating register for signal `\memory_interface.\int_enable_reg' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
  created $adff cell `$procdff$135' with positive edge clock and negative level reset.
Creating register for signal `\memory_interface.\rescale_ctrl_reg' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
  created $adff cell `$procdff$136' with positive edge clock and negative level reset.
Creating register for signal `\memory_interface.\apb_state' using process `\memory_interface.$proc$../../rtl/memory_interface.sv:108$3'.
  created $adff cell `$procdff$137' with positive edge clock and negative level reset.

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:282$31'.
Found and cleaned up 1 empty switch in `\memory_interface.$proc$../../rtl/memory_interface.sv:274$24'.
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:274$24'.
Found and cleaned up 1 empty switch in `\memory_interface.$proc$../../rtl/memory_interface.sv:265$21'.
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:265$21'.
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:0$16'.
Found and cleaned up 1 empty switch in `\memory_interface.$proc$../../rtl/memory_interface.sv:0$15'.
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:0$15'.
Found and cleaned up 2 empty switches in `\memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:149$11'.
Found and cleaned up 4 empty switches in `\memory_interface.$proc$../../rtl/memory_interface.sv:0$5'.
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:0$5'.
Removing empty process `memory_interface.$proc$../../rtl/memory_interface.sv:108$3'.
Cleaned up 9 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.
<suppressed ~6 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.
<suppressed ~6 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_interface.
    Consolidated identical input bits for $mux cell $procmux$34:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$34_Y
      New ports: A=1'0, B=1'1, Y=$procmux$34_Y [0]
      New connections: $procmux$34_Y [31:1] = { $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] $procmux$34_Y [0] }
  Optimizing cells in module \memory_interface.
Performed a total of 1 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

5.6. Executing OPT_SHARE pass.

5.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$132 ($adff) from module memory_interface (D = \pwdata_i, Q = \fft_config_reg).
Adding EN signal on $procdff$133 ($adff) from module memory_interface (D = \pwdata_i, Q = \fft_length_reg).
Adding EN signal on $procdff$137 ($adff) from module memory_interface (D = $procmux$123_Y, Q = \apb_state).
Adding EN signal on $procdff$136 ($adff) from module memory_interface (D = \pwdata_i, Q = \rescale_ctrl_reg).
Adding SRST signal on $procdff$130 ($dff) from module memory_interface (D = $memrd$\fft_memory$../../rtl/memory_interface.sv:269$23_DATA, Q = \mem_data_o, rval = 0).
Adding EN signal on $procdff$135 ($adff) from module memory_interface (D = \pwdata_i, Q = \int_enable_reg).
Adding EN signal on $procdff$131 ($adff) from module memory_interface (D = \pwdata_i, Q = \fft_ctrl_reg).
Adding EN signal on $procdff$134 ($adff) from module memory_interface (D = \pwdata_i, Q = \buffer_sel_reg).

5.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..
Removed 19 unused cells and 88 unused wires.
<suppressed ~20 debug messages>

5.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.
<suppressed ~3 debug messages>

5.10. Rerunning OPT passes. (Maybe there is more to do..)

5.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_interface.
    Consolidated identical input bits for $mux cell $procmux$109:
      Old ports: A=2'00, B=2'10, Y=$3\apb_next_state[1:0]
      New ports: A=1'0, B=1'1, Y=$3\apb_next_state[1:0] [1]
      New connections: $3\apb_next_state[1:0] [0] = 1'0
  Optimizing cells in module \memory_interface.
Performed a total of 1 changes.

5.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

5.14. Executing OPT_SHARE pass.

5.15. Executing OPT_DFF pass (perform DFF optimizations).

5.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

5.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.
<suppressed ~1 debug messages>

5.18. Rerunning OPT passes. (Maybe there is more to do..)

5.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_interface.
Performed a total of 0 changes.

5.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

5.22. Executing OPT_SHARE pass.

5.23. Executing OPT_DFF pass (perform DFF optimizations).

5.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

5.26. Rerunning OPT passes. (Maybe there is more to do..)

5.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_interface.
Performed a total of 0 changes.

5.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

5.30. Executing OPT_SHARE pass.

5.31. Executing OPT_DFF pass (perform DFF optimizations).

5.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..

5.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

5.34. Finished OPT passes. (There is nothing left to do.)

6. Executing MEMORY pass.

6.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

6.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing memory_interface.fft_memory write port 0.

6.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

6.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\fft_memory'[0] in module `\memory_interface': merging output FF to cell.
    Write port 0: non-transparent.

6.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..
Removed 1 unused cells and 33 unused wires.
<suppressed ~2 debug messages>

6.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..

6.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_interface.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

7.6. Executing OPT_SHARE pass.

7.7. Executing OPT_DFF pass (perform DFF optimizations).

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..

7.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

7.10. Finished OPT passes. (There is nothing left to do.)

8. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing memory_interface.fft_memory:
  Properties: ports=2 bits=65536 rports=1 wports=1 dbits=32 abits=11 words=2048
  No acceptable bram resources found.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_interface.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

9.6. Executing OPT_SHARE pass.

9.7. Executing OPT_DFF pass (perform DFF optimizations).

9.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..

9.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

9.10. Finished OPT passes. (There is nothing left to do.)

10. Executing PROC pass (convert processes to netlists).

10.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

10.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

10.4. Executing PROC_INIT pass (extract init attributes).

10.5. Executing PROC_ARST pass (detect async resets in processes).

10.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

10.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

10.8. Executing PROC_DLATCH pass (convert process syncs to latches).

10.9. Executing PROC_DFF pass (convert process syncs to FFs).

10.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

10.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_interface.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_interface'.
Removed a total of 0 cells.

11.6. Executing OPT_SHARE pass.

11.7. Executing OPT_DFF pass (perform DFF optimizations).

11.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_interface..

11.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_interface.

11.10. Finished OPT passes. (There is nothing left to do.)

12. Executing JSON backend.

13. Executing Verilog backend.

13.1. Executing BMUXMAP pass.

13.2. Executing DEMUXMAP pass.
Dumping module `\memory_interface'.

End of script. Logfile hash: ae794060ec, CPU: user 0.12s system 0.00s, MEM: 11.00 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 27% 13x opt_expr (0 sec), 20% 9x opt_clean (0 sec), ...
memory_interface BRAM synthesis completed
