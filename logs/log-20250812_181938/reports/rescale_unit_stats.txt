
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Running command `read_verilog -sv ../../rtl/rescale_unit.sv; hierarchy -top rescale_unit; synth -top rescale_unit; stat' --

1. Executing Verilog-2005 frontend: ../../rtl/rescale_unit.sv
Parsing SystemVerilog input from `../../rtl/rescale_unit.sv' to AST representation.
Generating RTLIL representation for module `\rescale_unit'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \rescale_unit

2.2. Analyzing design hierarchy..
Top module:  \rescale_unit
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \rescale_unit

3.1.2. Analyzing design hierarchy..
Top module:  \rescale_unit
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../../rtl/rescale_unit.sv:151$32 in module rescale_unit.
Marked 5 switch rules as full_case in process $proc$../../rtl/rescale_unit.sv:0$27 in module rescale_unit.
Marked 5 switch rules as full_case in process $proc$../../rtl/rescale_unit.sv:0$2 in module rescale_unit.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 16 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n_i in `\rescale_unit.$proc$../../rtl/rescale_unit.sv:151$32'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~15 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:182$39'.
Creating decoders for process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:173$38'.
     1/2: $0\data_imag_reg[15:0]
     2/2: $0\data_real_reg[15:0]
Creating decoders for process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:151$32'.
     1/3: $0\overflow_magnitude_reg[7:0]
     2/3: $0\rescale_count_reg[7:0]
     3/3: $0\scale_factor_reg[7:0]
Creating decoders for process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$27'.
     1/6: $3\data_imag_o[15:0]
     2/6: $2\data_imag_o[15:0]
     3/6: $3\data_real_o[15:0]
     4/6: $2\data_real_o[15:0]
     5/6: $1\data_imag_o[15:0]
     6/6: $1\data_real_o[15:0]
Creating decoders for process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
     1/20: $3\rescaled_imag[15:0]
     2/20: $3\rescaled_real[15:0]
     3/20: $2\scale_factor_increment_reg[0:0]
     4/20: $2\rescaled_imag[15:0]
     5/20: $2\rescaled_real[15:0]
     6/20: $2\overflow_magnitude_imag[7:0]
     7/20: $2\imag_overflow[0:0]
     8/20: $2\overflow_magnitude_real[7:0]
     9/20: $2\real_overflow[0:0]
    10/20: $1\scale_factor_increment_reg[0:0]
    11/20: $1\rescaled_imag[15:0]
    12/20: $1\rescaled_real[15:0]
    13/20: $1\overflow_magnitude_imag[7:0]
    14/20: $1\imag_overflow[0:0]
    15/20: $1\overflow_magnitude_real[7:0]
    16/20: $1\real_overflow[0:0]
    17/20: $1$unnamed_block$1.imag_overflow_bits[7:0]$11
    18/20: $1$unnamed_block$1.imag_msb[1:0]$9
    19/20: $1$unnamed_block$1.real_overflow_bits[7:0]$10
    20/20: $1$unnamed_block$1.real_msb[1:0]$8

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\rescale_unit.\data_real_o' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$27'.
No latch inferred for signal `\rescale_unit.\data_imag_o' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$27'.
No latch inferred for signal `\rescale_unit.\rescaled_real' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.\rescaled_imag' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.\scale_factor_increment_reg' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.\real_overflow' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.\imag_overflow' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.\overflow_magnitude_real' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.\overflow_magnitude_imag' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.$unnamed_block$1.real_msb' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.$unnamed_block$1.imag_msb' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.$unnamed_block$1.real_overflow_bits' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
No latch inferred for signal `\rescale_unit.$unnamed_block$1.imag_overflow_bits' from process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\rescale_unit.\rescaling_active_reg' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:182$39'.
  created $dff cell `$procdff$190' with positive edge clock.
Creating register for signal `\rescale_unit.\overflow_detected_reg' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:182$39'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\rescale_unit.\data_valid_o' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:173$38'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\rescale_unit.\data_real_reg' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:173$38'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\rescale_unit.\data_imag_reg' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:173$38'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\rescale_unit.\scale_factor_reg' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:151$32'.
  created $adff cell `$procdff$195' with positive edge clock and negative level reset.
Creating register for signal `\rescale_unit.\rescale_count_reg' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:151$32'.
  created $adff cell `$procdff$196' with positive edge clock and negative level reset.
Creating register for signal `\rescale_unit.\overflow_magnitude_reg' using process `\rescale_unit.$proc$../../rtl/rescale_unit.sv:151$32'.
  created $adff cell `$procdff$197' with positive edge clock and negative level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `rescale_unit.$proc$../../rtl/rescale_unit.sv:182$39'.
Found and cleaned up 1 empty switch in `\rescale_unit.$proc$../../rtl/rescale_unit.sv:173$38'.
Removing empty process `rescale_unit.$proc$../../rtl/rescale_unit.sv:173$38'.
Found and cleaned up 4 empty switches in `\rescale_unit.$proc$../../rtl/rescale_unit.sv:151$32'.
Removing empty process `rescale_unit.$proc$../../rtl/rescale_unit.sv:151$32'.
Found and cleaned up 5 empty switches in `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$27'.
Removing empty process `rescale_unit.$proc$../../rtl/rescale_unit.sv:0$27'.
Found and cleaned up 5 empty switches in `\rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
Removing empty process `rescale_unit.$proc$../../rtl/rescale_unit.sv:0$2'.
Cleaned up 15 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.
<suppressed ~6 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 5 unused cells and 122 unused wires.
<suppressed ~6 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module rescale_unit...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$102.
    dead port 2/2 on $mux $procmux$104.
    dead port 2/2 on $mux $procmux$111.
    dead port 2/2 on $mux $procmux$113.
    dead port 2/2 on $mux $procmux$119.
    dead port 2/2 on $mux $procmux$125.
    dead port 2/2 on $mux $procmux$131.
    dead port 2/2 on $mux $procmux$137.
    dead port 2/2 on $mux $procmux$149.
    dead port 1/2 on $mux $procmux$66.
    dead port 2/2 on $mux $procmux$68.
    dead port 2/2 on $mux $procmux$74.
    dead port 1/2 on $mux $procmux$81.
    dead port 2/2 on $mux $procmux$83.
    dead port 2/2 on $mux $procmux$89.
Removed 15 multiplexer ports.
<suppressed ~18 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$197 ($adff) from module rescale_unit (D = $procmux$47_Y, Q = \overflow_magnitude_reg).
Adding EN signal on $procdff$196 ($adff) from module rescale_unit (D = $add$../../rtl/rescale_unit.sv:159$35_Y [7:0], Q = \rescale_count_reg).
Adding EN signal on $procdff$195 ($adff) from module rescale_unit (D = $add$../../rtl/rescale_unit.sv:158$34_Y [7:0], Q = \scale_factor_reg).
Adding EN signal on $procdff$194 ($dff) from module rescale_unit (D = \data_imag_i, Q = \data_imag_reg).
Adding EN signal on $procdff$193 ($dff) from module rescale_unit (D = \data_real_i, Q = \data_real_reg).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.
<suppressed ~1 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.8.23. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell rescale_unit.$ternary$../../rtl/rescale_unit.sv:112$20 ($mux).
Removed top 17 bits (of 32) from port A of cell rescale_unit.$add$../../rtl/rescale_unit.sv:112$21 ($add).
Removed top 31 bits (of 32) from port B of cell rescale_unit.$add$../../rtl/rescale_unit.sv:112$21 ($add).
Removed top 16 bits (of 32) from port Y of cell rescale_unit.$add$../../rtl/rescale_unit.sv:112$21 ($add).
Removed top 31 bits (of 32) from mux cell rescale_unit.$ternary$../../rtl/rescale_unit.sv:113$23 ($mux).
Removed top 17 bits (of 32) from port A of cell rescale_unit.$add$../../rtl/rescale_unit.sv:113$24 ($add).
Removed top 31 bits (of 32) from port B of cell rescale_unit.$add$../../rtl/rescale_unit.sv:113$24 ($add).
Removed top 16 bits (of 32) from port Y of cell rescale_unit.$add$../../rtl/rescale_unit.sv:113$24 ($add).
Removed top 1 bits (of 16) from port B of cell rescale_unit.$gt$../../rtl/rescale_unit.sv:129$28 ($gt).
Removed top 1 bits (of 16) from port B of cell rescale_unit.$gt$../../rtl/rescale_unit.sv:137$30 ($gt).
Removed top 31 bits (of 32) from port B of cell rescale_unit.$add$../../rtl/rescale_unit.sv:158$34 ($add).
Removed top 24 bits (of 32) from port Y of cell rescale_unit.$add$../../rtl/rescale_unit.sv:158$34 ($add).
Removed top 31 bits (of 32) from port B of cell rescale_unit.$add$../../rtl/rescale_unit.sv:159$35 ($add).
Removed top 24 bits (of 32) from port Y of cell rescale_unit.$add$../../rtl/rescale_unit.sv:159$35 ($add).
Removed top 16 bits (of 32) from wire rescale_unit.$add$../../rtl/rescale_unit.sv:112$21_Y.
Removed top 31 bits (of 32) from wire rescale_unit.$ternary$../../rtl/rescale_unit.sv:112$20_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module rescale_unit:
  creating $macc model for $add$../../rtl/rescale_unit.sv:112$21 ($add).
  creating $macc model for $add$../../rtl/rescale_unit.sv:113$24 ($add).
  creating $macc model for $add$../../rtl/rescale_unit.sv:158$34 ($add).
  creating $macc model for $add$../../rtl/rescale_unit.sv:159$35 ($add).
  creating $alu model for $macc $add$../../rtl/rescale_unit.sv:159$35.
  creating $alu model for $macc $add$../../rtl/rescale_unit.sv:158$34.
  creating $alu model for $macc $add$../../rtl/rescale_unit.sv:113$24.
  creating $alu model for $macc $add$../../rtl/rescale_unit.sv:112$21.
  creating $alu model for $gt$../../rtl/rescale_unit.sv:129$28 ($gt): new $alu
  creating $alu model for $gt$../../rtl/rescale_unit.sv:137$30 ($gt): new $alu
  creating $alu model for $gt$../../rtl/rescale_unit.sv:162$36 ($gt): new $alu
  creating $alu model for $gt$../../rtl/rescale_unit.sv:165$37 ($gt): new $alu
  creating $alu model for $lt$../../rtl/rescale_unit.sv:131$29 ($lt): new $alu
  creating $alu model for $lt$../../rtl/rescale_unit.sv:139$31 ($lt): new $alu
  creating $alu cell for $lt$../../rtl/rescale_unit.sv:139$31: $auto$alumacc.cc:485:replace_alu$219
  creating $alu cell for $lt$../../rtl/rescale_unit.sv:131$29: $auto$alumacc.cc:485:replace_alu$224
  creating $alu cell for $gt$../../rtl/rescale_unit.sv:165$37: $auto$alumacc.cc:485:replace_alu$229
  creating $alu cell for $gt$../../rtl/rescale_unit.sv:162$36: $auto$alumacc.cc:485:replace_alu$240
  creating $alu cell for $gt$../../rtl/rescale_unit.sv:137$30: $auto$alumacc.cc:485:replace_alu$251
  creating $alu cell for $gt$../../rtl/rescale_unit.sv:129$28: $auto$alumacc.cc:485:replace_alu$256
  creating $alu cell for $add$../../rtl/rescale_unit.sv:112$21: $auto$alumacc.cc:485:replace_alu$261
  creating $alu cell for $add$../../rtl/rescale_unit.sv:113$24: $auto$alumacc.cc:485:replace_alu$264
  creating $alu cell for $add$../../rtl/rescale_unit.sv:158$34: $auto$alumacc.cc:485:replace_alu$267
  creating $alu cell for $add$../../rtl/rescale_unit.sv:159$35: $auto$alumacc.cc:485:replace_alu$270
  created 10 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.
<suppressed ~6 debug messages>

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 4 unused cells and 10 unused wires.
<suppressed ~5 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.
<suppressed ~15 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 30 unused cells and 68 unused wires.
<suppressed ~31 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rescale_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rescale_unit.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$6177de982a145c5b9397c76cce0d57e0a983739a\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
No more expansions possible.
<suppressed ~896 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.
<suppressed ~362 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
<suppressed ~75 debug messages>
Removed a total of 25 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 80 unused cells and 417 unused wires.
<suppressed ~81 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\rescale_unit' to `<abc-temp-dir>/input.blif'..
Extracted 449 gates and 512 wires to a netlist network with 61 inputs and 60 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:       14
ABC RESULTS:             ORNOT cells:       26
ABC RESULTS:                OR cells:       25
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               MUX cells:      132
ABC RESULTS:               NOT cells:       10
ABC RESULTS:              NAND cells:       27
ABC RESULTS:            ANDNOT cells:       60
ABC RESULTS:               AND cells:       14
ABC RESULTS:               XOR cells:       50
ABC RESULTS:        internal signals:      391
ABC RESULTS:           input signals:       61
ABC RESULTS:          output signals:       60
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rescale_unit.
<suppressed ~32 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rescale_unit'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rescale_unit..
Removed 2 unused cells and 214 unused wires.
<suppressed ~9 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \rescale_unit

3.24.2. Analyzing design hierarchy..
Top module:  \rescale_unit
Removed 0 unused modules.

3.25. Printing statistics.

=== rescale_unit ===

   Number of wires:                354
   Number of wire bits:            521
   Number of public wires:          29
   Number of public wire bits:     168
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                429
     $_ANDNOT_                      60
     $_AND_                         14
     $_DFFE_PN0P_                   24
     $_DFFE_PP_                     32
     $_DFF_P_                        3
     $_MUX_                        132
     $_NAND_                        27
     $_NOR_                         14
     $_NOT_                          8
     $_ORNOT_                       26
     $_OR_                          25
     $_XNOR_                        14
     $_XOR_                         50

3.26. Executing CHECK pass (checking for obvious problems).
Checking module rescale_unit...
Found and reported 0 problems.

4. Printing statistics.

=== rescale_unit ===

   Number of wires:                354
   Number of wire bits:            521
   Number of public wires:          29
   Number of public wire bits:     168
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                429
     $_ANDNOT_                      60
     $_AND_                         14
     $_DFFE_PN0P_                   24
     $_DFFE_PP_                     32
     $_DFF_P_                        3
     $_MUX_                        132
     $_NAND_                        27
     $_NOR_                         14
     $_NOT_                          8
     $_ORNOT_                       26
     $_OR_                          25
     $_XNOR_                        14
     $_XOR_                         50

End of script. Logfile hash: e62b844c3f, CPU: user 0.32s system 0.01s, MEM: 17.88 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 23% 23x opt_expr (0 sec), 20% 1x abc (0 sec), ...
