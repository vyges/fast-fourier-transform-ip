
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Running command `read_verilog -sv ../../rtl/fft_engine.sv; hierarchy -top fft_engine; synth -top fft_engine; stat' --

1. Executing Verilog-2005 frontend: ../../rtl/fft_engine.sv
Parsing SystemVerilog input from `../../rtl/fft_engine.sv' to AST representation.
Generating RTLIL representation for module `\fft_engine'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \fft_engine

2.2. Analyzing design hierarchy..
Top module:  \fft_engine
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \fft_engine

3.1.2. Analyzing design hierarchy..
Top module:  \fft_engine
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:437$99 in module fft_engine.
Marked 3 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:382$64 in module fft_engine.
Marked 1 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:361$54 in module fft_engine.
Marked 1 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:341$49 in module fft_engine.
Marked 1 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:323$42 in module fft_engine.
Marked 1 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:311$41 in module fft_engine.
Marked 1 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:300$38 in module fft_engine.
Marked 2 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:288$36 in module fft_engine.
Marked 5 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:267$31 in module fft_engine.
Marked 2 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:216$13 in module fft_engine.
Marked 6 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:0$6 in module fft_engine.
Marked 2 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:145$4 in module fft_engine.
Marked 1 switch rules as full_case in process $proc$../../rtl/fft_engine.sv:124$2 in module fft_engine.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 10 redundant assignments.
Promoted 14 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n_i in `\fft_engine.$proc$../../rtl/fft_engine.sv:437$99'.
Found async reset \reset_n_i in `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
Found async reset \reset_n_i in `\fft_engine.$proc$../../rtl/fft_engine.sv:145$4'.
Found async reset \reset_n_i in `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~30 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:437$99'.
     1/2: $0\butterfly_counter[11:0]
     2/2: $0\stage_counter[11:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
     1/16: $0\pipeline_rescaling_active[0:0]
     2/16: $2$unnamed_block$1.imag_overflow_b[0:0]$77
     3/16: $2$unnamed_block$1.real_overflow_b[0:0]$76
     4/16: $2$unnamed_block$1.imag_overflow_a[0:0]$75
     5/16: $2$unnamed_block$1.real_overflow_a[0:0]$74
     6/16: $1$unnamed_block$1.imag_overflow_b[0:0]$72
     7/16: $1$unnamed_block$1.real_overflow_b[0:0]$71
     8/16: $1$unnamed_block$1.imag_overflow_a[0:0]$70
     9/16: $1$unnamed_block$1.real_overflow_a[0:0]$69
    10/16: $0\pipeline_valid[5:5]
    11/16: $0\scale_factor_increment[0:0]
    12/16: $0\butterfly_final_imag_b[15:0]
    13/16: $0\butterfly_final_real_b[15:0]
    14/16: $0\butterfly_final_imag_a[15:0]
    15/16: $0\butterfly_final_real_a[15:0]
    16/16: $0\mem_data_i[31:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
     1/7: $0\pipeline_valid[4:4]
     2/7: $0\butterfly_result_imag_b[15:0]
     3/7: $0\butterfly_result_real_b[15:0]
     4/7: $0\butterfly_twiddle_imag[15:0]
     5/7: $0\butterfly_twiddle_real[15:0]
     6/7: $0\pipeline_addr_b_4[15:0]
     7/7: $0\pipeline_addr_a_4[15:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
     1/8: $0\pipeline_valid[3:3]
     2/8: $0\butterfly_temp_imag[15:0]
     3/8: $0\butterfly_temp_real[15:0]
     4/8: $0\butterfly_result_imag_a[15:0]
     5/8: $0\butterfly_result_real_a[15:0]
     6/8: $0\pipeline_twiddle_3[31:0]
     7/8: $0\pipeline_addr_b_3[15:0]
     8/8: $0\pipeline_addr_a_3[15:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
     1/8: $0\pipeline_valid[2:2]
     2/8: $0\butterfly_imag_b[15:0]
     3/8: $0\butterfly_real_b[15:0]
     4/8: $0\butterfly_imag_a[15:0]
     5/8: $0\butterfly_real_a[15:0]
     6/8: $0\pipeline_data_b_2[31:0]
     7/8: $0\pipeline_addr_b_2[15:0]
     8/8: $0\pipeline_addr_a_2[15:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:311$41'.
     1/4: $0\pipeline_valid[1:1]
     2/4: $0\pipeline_data_a_1[31:0]
     3/4: $0\pipeline_addr_b_1[15:0]
     4/4: $0\pipeline_addr_a_1[15:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:300$38'.
     1/3: $0\pipeline_valid[0:0]
     2/3: $0\pipeline_addr_b_0[15:0]
     3/3: $0\pipeline_addr_a_0[15:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:288$36'.
     1/1: $0\mem_write_i[0:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:267$31'.
     1/1: $0\mem_addr_i[15:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$21'.
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
     1/7: $0\overflow_detected_reg[0:0]
     2/7: $0\rescaling_active_reg[0:0]
     3/7: $0\max_overflow_magnitude_reg[7:0]
     4/7: $0\last_overflow_stage_reg[7:0]
     5/7: $0\overflow_count_reg[7:0]
     6/7: $0\stage_count_reg[7:0]
     7/7: $0\scale_factor_reg[7:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$9'.
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$6'.
     1/6: $6\fft_next_state[2:0]
     2/6: $5\fft_next_state[2:0]
     3/6: $4\fft_next_state[2:0]
     4/6: $3\fft_next_state[2:0]
     5/6: $2\fft_next_state[2:0]
     6/6: $1\fft_next_state[2:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:145$4'.
     1/1: $0\fft_state[2:0]
Creating decoders for process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
     1/7: $0\overflow_detect_reg[0:0]
     2/7: $0\saturation_en_reg[0:0]
     3/7: $0\rounding_mode_reg[0:0]
     4/7: $0\rescale_mode_reg[0:0]
     5/7: $0\scale_track_en_reg[0:0]
     6/7: $0\rescale_en_reg[0:0]
     7/7: $0\fft_length_log2_reg[11:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fft_engine.\butterfly_spacing' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$21'.
No latch inferred for signal `\fft_engine.\addr_a' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$21'.
No latch inferred for signal `\fft_engine.\addr_b' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$21'.
No latch inferred for signal `\fft_engine.\twiddle_addr' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$21'.
No latch inferred for signal `\fft_engine.\fft_busy_o' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$9'.
No latch inferred for signal `\fft_engine.\fft_done_o' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$9'.
No latch inferred for signal `\fft_engine.\fft_error_o' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$9'.
No latch inferred for signal `\fft_engine.\rescaling_active_o' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$9'.
No latch inferred for signal `\fft_engine.\overflow_detected_o' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$9'.
No latch inferred for signal `\fft_engine.\fft_next_state' from process `\fft_engine.$proc$../../rtl/fft_engine.sv:0$6'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fft_engine.\stage_counter' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:437$99'.
  created $adff cell `$procdff$456' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\butterfly_counter' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:437$99'.
  created $adff cell `$procdff$457' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\mem_data_i' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$458' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_valid [5]' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$459' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_final_real_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$460' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_final_imag_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$461' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_final_real_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$462' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_final_imag_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$463' with positive edge clock.
Creating register for signal `\fft_engine.\scale_factor_increment' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$464' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_rescaling_active' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$465' with positive edge clock.
Creating register for signal `\fft_engine.$unnamed_block$1.real_overflow_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$466' with positive edge clock.
Creating register for signal `\fft_engine.$unnamed_block$1.imag_overflow_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$467' with positive edge clock.
Creating register for signal `\fft_engine.$unnamed_block$1.real_overflow_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$468' with positive edge clock.
Creating register for signal `\fft_engine.$unnamed_block$1.imag_overflow_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
  created $dff cell `$procdff$469' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_valid [4]' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
  created $dff cell `$procdff$470' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_a_4' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
  created $dff cell `$procdff$471' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_b_4' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
  created $dff cell `$procdff$472' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_twiddle_real' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
  created $dff cell `$procdff$473' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_twiddle_imag' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
  created $dff cell `$procdff$474' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_result_real_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
  created $dff cell `$procdff$475' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_result_imag_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
  created $dff cell `$procdff$476' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_valid [3]' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$477' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_a_3' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$478' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_b_3' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$479' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_twiddle_3' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$480' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_result_real_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$481' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_result_imag_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$482' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_temp_real' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$483' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_temp_imag' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
  created $dff cell `$procdff$484' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_valid [2]' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$485' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_a_2' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$486' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_b_2' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$487' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_data_b_2' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$488' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_real_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$489' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_imag_a' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$490' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_real_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$491' with positive edge clock.
Creating register for signal `\fft_engine.\butterfly_imag_b' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
  created $dff cell `$procdff$492' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_valid [1]' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:311$41'.
  created $dff cell `$procdff$493' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_a_1' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:311$41'.
  created $dff cell `$procdff$494' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_b_1' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:311$41'.
  created $dff cell `$procdff$495' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_data_a_1' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:311$41'.
  created $dff cell `$procdff$496' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_valid [0]' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:300$38'.
  created $dff cell `$procdff$497' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_a_0' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:300$38'.
  created $dff cell `$procdff$498' with positive edge clock.
Creating register for signal `\fft_engine.\pipeline_addr_b_0' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:300$38'.
  created $dff cell `$procdff$499' with positive edge clock.
Creating register for signal `\fft_engine.\mem_write_i' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:288$36'.
  created $dff cell `$procdff$500' with positive edge clock.
Creating register for signal `\fft_engine.\mem_addr_i' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:267$31'.
  created $dff cell `$procdff$501' with positive edge clock.
Creating register for signal `\fft_engine.\scale_factor_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
  created $adff cell `$procdff$502' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\stage_count_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
  created $adff cell `$procdff$503' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\overflow_count_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
  created $adff cell `$procdff$504' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\last_overflow_stage_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
  created $adff cell `$procdff$505' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\max_overflow_magnitude_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
  created $adff cell `$procdff$506' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\rescaling_active_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
  created $adff cell `$procdff$507' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\overflow_detected_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
  created $adff cell `$procdff$508' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\fft_state' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:145$4'.
  created $adff cell `$procdff$509' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\fft_length_log2_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
  created $adff cell `$procdff$510' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\rescale_en_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
  created $adff cell `$procdff$511' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\scale_track_en_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
  created $adff cell `$procdff$512' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\rescale_mode_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
  created $adff cell `$procdff$513' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\rounding_mode_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
  created $adff cell `$procdff$514' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\saturation_en_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
  created $adff cell `$procdff$515' with positive edge clock and negative level reset.
Creating register for signal `\fft_engine.\overflow_detect_reg' using process `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
  created $adff cell `$procdff$516' with positive edge clock and negative level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\fft_engine.$proc$../../rtl/fft_engine.sv:437$99'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:437$99'.
Found and cleaned up 3 empty switches in `\fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:382$64'.
Found and cleaned up 1 empty switch in `\fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:361$54'.
Found and cleaned up 1 empty switch in `\fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:341$49'.
Found and cleaned up 1 empty switch in `\fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:323$42'.
Found and cleaned up 1 empty switch in `\fft_engine.$proc$../../rtl/fft_engine.sv:311$41'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:311$41'.
Found and cleaned up 1 empty switch in `\fft_engine.$proc$../../rtl/fft_engine.sv:300$38'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:300$38'.
Found and cleaned up 2 empty switches in `\fft_engine.$proc$../../rtl/fft_engine.sv:288$36'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:288$36'.
Found and cleaned up 5 empty switches in `\fft_engine.$proc$../../rtl/fft_engine.sv:267$31'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:267$31'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:0$21'.
Found and cleaned up 4 empty switches in `\fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:216$13'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:0$9'.
Found and cleaned up 6 empty switches in `\fft_engine.$proc$../../rtl/fft_engine.sv:0$6'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:0$6'.
Found and cleaned up 1 empty switch in `\fft_engine.$proc$../../rtl/fft_engine.sv:145$4'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:145$4'.
Found and cleaned up 1 empty switch in `\fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
Removing empty process `fft_engine.$proc$../../rtl/fft_engine.sv:124$2'.
Cleaned up 30 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.
<suppressed ~19 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 49 unused cells and 293 unused wires.
<suppressed ~90 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module fft_engine...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$383.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$395.
    dead port 2/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$406.
    dead port 2/2 on $mux $procmux$416.
    dead port 2/2 on $mux $procmux$428.
Removed 7 multiplexer ports.
<suppressed ~48 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking fft_engine.fft_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking fft_engine.max_overflow_magnitude_reg as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$516 ($adff) from module fft_engine (D = \overflow_detect_i, Q = \overflow_detect_reg).
Adding EN signal on $procdff$513 ($adff) from module fft_engine (D = \rescale_mode_i, Q = \rescale_mode_reg).
Adding EN signal on $procdff$512 ($adff) from module fft_engine (D = \scale_track_en_i, Q = \scale_track_en_reg).
Adding EN signal on $procdff$511 ($adff) from module fft_engine (D = \rescale_en_i, Q = \rescale_en_reg).
Adding EN signal on $procdff$510 ($adff) from module fft_engine (D = \fft_length_log2_i, Q = \fft_length_log2_reg).
Adding EN signal on $procdff$509 ($adff) from module fft_engine (D = $0\fft_state[2:0], Q = \fft_state).
Adding EN signal on $procdff$508 ($adff) from module fft_engine (D = $0\overflow_detected_reg[0:0], Q = \overflow_detected_reg).
Adding EN signal on $procdff$507 ($adff) from module fft_engine (D = $0\rescaling_active_reg[0:0], Q = \rescaling_active_reg).
Adding EN signal on $procdff$506 ($adff) from module fft_engine (D = 8'00000000, Q = \max_overflow_magnitude_reg).
Adding EN signal on $procdff$505 ($adff) from module fft_engine (D = $0\last_overflow_stage_reg[7:0], Q = \last_overflow_stage_reg).
Adding EN signal on $procdff$504 ($adff) from module fft_engine (D = $0\overflow_count_reg[7:0], Q = \overflow_count_reg).
Adding EN signal on $procdff$503 ($adff) from module fft_engine (D = $0\stage_count_reg[7:0], Q = \stage_count_reg).
Adding EN signal on $procdff$502 ($adff) from module fft_engine (D = $0\scale_factor_reg[7:0], Q = \scale_factor_reg).
Adding SRST signal on $procdff$501 ($dff) from module fft_engine (D = $procmux$327_Y, Q = \mem_addr_i, rval = 16'0000000000000000).
Adding SRST signal on $procdff$500 ($dff) from module fft_engine (D = $0\pipeline_valid[5:5], Q = \mem_write_i, rval = 1'0).
Adding EN signal on $procdff$499 ($dff) from module fft_engine (D = \addr_b, Q = \pipeline_addr_b_0).
Adding EN signal on $procdff$498 ($dff) from module fft_engine (D = \addr_a, Q = \pipeline_addr_a_0).
Adding EN signal on $procdff$496 ($dff) from module fft_engine (D = \mem_data_o, Q = \pipeline_data_a_1).
Adding EN signal on $procdff$494 ($dff) from module fft_engine (D = \pipeline_addr_a_0, Q = \pipeline_addr_a_1).
Adding EN signal on $procdff$492 ($dff) from module fft_engine (D = \mem_data_o [15:0], Q = \butterfly_imag_b).
Adding EN signal on $procdff$491 ($dff) from module fft_engine (D = \mem_data_o [31:16], Q = \butterfly_real_b).
Adding EN signal on $procdff$490 ($dff) from module fft_engine (D = \pipeline_data_a_1 [15:0], Q = \butterfly_imag_a).
Adding EN signal on $procdff$489 ($dff) from module fft_engine (D = \pipeline_data_a_1 [31:16], Q = \butterfly_real_a).
Adding EN signal on $procdff$486 ($dff) from module fft_engine (D = \pipeline_addr_a_1, Q = \pipeline_addr_a_2).
Adding EN signal on $procdff$484 ($dff) from module fft_engine (D = $sub$../../rtl/fft_engine.sv:354$53_Y, Q = \butterfly_temp_imag).
Adding EN signal on $procdff$483 ($dff) from module fft_engine (D = $sub$../../rtl/fft_engine.sv:353$52_Y, Q = \butterfly_temp_real).
Adding EN signal on $procdff$482 ($dff) from module fft_engine (D = $add$../../rtl/fft_engine.sv:350$51_Y, Q = \butterfly_result_imag_a).
Adding EN signal on $procdff$481 ($dff) from module fft_engine (D = $add$../../rtl/fft_engine.sv:349$50_Y, Q = \butterfly_result_real_a).
Adding EN signal on $procdff$480 ($dff) from module fft_engine (D = \mem_data_o, Q = \pipeline_twiddle_3).
Adding EN signal on $procdff$478 ($dff) from module fft_engine (D = \pipeline_addr_a_2, Q = \pipeline_addr_a_3).
Adding EN signal on $procdff$476 ($dff) from module fft_engine (D = $add$../../rtl/fft_engine.sv:374$63_Y, Q = \butterfly_result_imag_b).
Adding EN signal on $procdff$475 ($dff) from module fft_engine (D = $sub$../../rtl/fft_engine.sv:372$60_Y, Q = \butterfly_result_real_b).
Adding EN signal on $procdff$474 ($dff) from module fft_engine (D = \pipeline_twiddle_3 [15:0], Q = \butterfly_twiddle_imag).
Adding EN signal on $procdff$473 ($dff) from module fft_engine (D = \pipeline_twiddle_3 [31:16], Q = \butterfly_twiddle_real).
Adding EN signal on $procdff$471 ($dff) from module fft_engine (D = \pipeline_addr_a_3, Q = \pipeline_addr_a_4).
Adding SRST signal on $procdff$465 ($dff) from module fft_engine (D = $procmux$130_Y, Q = \pipeline_rescaling_active, rval = 1'0).
Adding EN signal on $procdff$464 ($dff) from module fft_engine (D = $procmux$130_Y, Q = \scale_factor_increment).
Adding EN signal on $procdff$461 ($dff) from module fft_engine (D = $procmux$205_Y, Q = \butterfly_final_imag_a).
Adding EN signal on $procdff$460 ($dff) from module fft_engine (D = $procmux$214_Y, Q = \butterfly_final_real_a).
Adding EN signal on $procdff$458 ($dff) from module fft_engine (D = $or$../../rtl/fft_engine.sv:429$98_Y, Q = \mem_data_i).
Adding EN signal on $procdff$457 ($adff) from module fft_engine (D = $0\butterfly_counter[11:0], Q = \butterfly_counter).
Adding EN signal on $procdff$456 ($adff) from module fft_engine (D = $0\stage_counter[11:0], Q = \stage_counter).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$541 ($adffe) from module fft_engine.

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 33 unused cells and 33 unused wires.
<suppressed ~34 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.
<suppressed ~8 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.8.23. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:235$15 ($add).
Removed top 24 bits (of 32) from port Y of cell fft_engine.$add$../../rtl/fft_engine.sv:235$15 ($add).
Removed top 31 bits (of 32) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:236$16 ($add).
Removed top 24 bits (of 32) from port Y of cell fft_engine.$add$../../rtl/fft_engine.sv:236$16 ($add).
Removed top 1 bits (of 3) from port B of cell fft_engine.$eq$../../rtl/fft_engine.sv:241$18 ($eq).
Removed top 31 bits (of 32) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:242$20 ($add).
Removed top 24 bits (of 32) from port Y of cell fft_engine.$add$../../rtl/fft_engine.sv:242$20 ($add).
Removed top 30 bits (of 32) from port A of cell fft_engine.$shl$../../rtl/fft_engine.sv:259$22 ($shl).
Removed top 20 bits (of 32) from port Y of cell fft_engine.$shl$../../rtl/fft_engine.sv:259$22 ($shl).
Removed top 4 bits (of 16) from port A of cell fft_engine.$mul$../../rtl/fft_engine.sv:260$23 ($mul).
Removed top 4 bits (of 16) from port B of cell fft_engine.$mul$../../rtl/fft_engine.sv:260$23 ($mul).
Removed top 4 bits (of 16) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:260$24 ($add).
Removed top 4 bits (of 16) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:261$25 ($add).
Removed top 3 bits (of 16) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:278$35 ($add).
Removed top 16 bits (of 32) from port B of cell fft_engine.$or$../../rtl/fft_engine.sv:429$98 ($or).
Removed top 31 bits (of 32) from port B of cell fft_engine.$sub$../../rtl/fft_engine.sv:445$103 ($sub).
Removed top 19 bits (of 32) from port Y of cell fft_engine.$sub$../../rtl/fft_engine.sv:445$103 ($sub).
Removed top 31 bits (of 32) from port A of cell fft_engine.$shl$../../rtl/fft_engine.sv:445$104 ($shl).
Removed top 31 bits (of 32) from port B of cell fft_engine.$sub$../../rtl/fft_engine.sv:445$105 ($sub).
Removed top 31 bits (of 32) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:447$107 ($add).
Removed top 20 bits (of 32) from port Y of cell fft_engine.$add$../../rtl/fft_engine.sv:447$107 ($add).
Removed top 31 bits (of 32) from port B of cell fft_engine.$add$../../rtl/fft_engine.sv:449$108 ($add).
Removed top 20 bits (of 32) from port Y of cell fft_engine.$add$../../rtl/fft_engine.sv:449$108 ($add).
Removed top 2 bits (of 3) from mux cell fft_engine.$procmux$393 ($mux).
Removed top 1 bits (of 3) from port B of cell fft_engine.$auto$opt_dff.cc:195:make_patterns_logic$535 ($ne).
Removed top 1 bits (of 3) from port B of cell fft_engine.$procmux$417_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell fft_engine.$auto$opt_dff.cc:195:make_patterns_logic$560 ($ne).
Removed top 2 bits (of 3) from port B of cell fft_engine.$procmux$437_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell fft_engine.$auto$opt_dff.cc:195:make_patterns_logic$604 ($ne).
Removed top 2 bits (of 3) from wire fft_engine.$5\fft_next_state[2:0].
Removed top 24 bits (of 32) from wire fft_engine.$add$../../rtl/fft_engine.sv:235$15_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fft_engine:
  creating $macc model for $add$../../rtl/fft_engine.sv:235$15 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:236$16 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:242$20 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:260$24 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:261$25 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:278$35 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:349$50 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:350$51 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:374$63 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:447$107 ($add).
  creating $macc model for $add$../../rtl/fft_engine.sv:449$108 ($add).
  creating $macc model for $mul$../../rtl/fft_engine.sv:260$23 ($mul).
  creating $macc model for $mul$../../rtl/fft_engine.sv:372$58 ($mul).
  creating $macc model for $mul$../../rtl/fft_engine.sv:373$59 ($mul).
  creating $macc model for $mul$../../rtl/fft_engine.sv:374$61 ($mul).
  creating $macc model for $mul$../../rtl/fft_engine.sv:375$62 ($mul).
  creating $macc model for $sub$../../rtl/fft_engine.sv:353$52 ($sub).
  creating $macc model for $sub$../../rtl/fft_engine.sv:354$53 ($sub).
  creating $macc model for $sub$../../rtl/fft_engine.sv:372$60 ($sub).
  creating $macc model for $sub$../../rtl/fft_engine.sv:445$103 ($sub).
  creating $macc model for $sub$../../rtl/fft_engine.sv:445$105 ($sub).
  merging $macc model for $mul$../../rtl/fft_engine.sv:372$58 into $sub$../../rtl/fft_engine.sv:372$60.
  merging $macc model for $mul$../../rtl/fft_engine.sv:373$59 into $sub$../../rtl/fft_engine.sv:372$60.
  merging $macc model for $mul$../../rtl/fft_engine.sv:374$61 into $add$../../rtl/fft_engine.sv:374$63.
  merging $macc model for $mul$../../rtl/fft_engine.sv:375$62 into $add$../../rtl/fft_engine.sv:374$63.
  merging $macc model for $mul$../../rtl/fft_engine.sv:260$23 into $add$../../rtl/fft_engine.sv:260$24.
  creating $alu model for $macc $sub$../../rtl/fft_engine.sv:445$103.
  creating $alu model for $macc $sub$../../rtl/fft_engine.sv:354$53.
  creating $alu model for $macc $sub$../../rtl/fft_engine.sv:353$52.
  creating $alu model for $macc $sub$../../rtl/fft_engine.sv:445$105.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:449$108.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:447$107.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:350$51.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:349$50.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:278$35.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:261$25.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:242$20.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:236$16.
  creating $alu model for $macc $add$../../rtl/fft_engine.sv:235$15.
  creating $macc cell for $add$../../rtl/fft_engine.sv:374$63: $auto$alumacc.cc:365:replace_macc$609
  creating $macc cell for $sub$../../rtl/fft_engine.sv:372$60: $auto$alumacc.cc:365:replace_macc$610
  creating $macc cell for $add$../../rtl/fft_engine.sv:260$24: $auto$alumacc.cc:365:replace_macc$611
  creating $alu model for $ge$../../rtl/fft_engine.sv:177$7 ($ge): new $alu
  creating $alu model for $ge$../../rtl/fft_engine.sv:445$106 ($ge): new $alu
  creating $alu cell for $ge$../../rtl/fft_engine.sv:445$106: $auto$alumacc.cc:485:replace_alu$614
  creating $alu cell for $ge$../../rtl/fft_engine.sv:177$7: $auto$alumacc.cc:485:replace_alu$627
  creating $alu cell for $add$../../rtl/fft_engine.sv:235$15: $auto$alumacc.cc:485:replace_alu$636
  creating $alu cell for $add$../../rtl/fft_engine.sv:236$16: $auto$alumacc.cc:485:replace_alu$639
  creating $alu cell for $add$../../rtl/fft_engine.sv:242$20: $auto$alumacc.cc:485:replace_alu$642
  creating $alu cell for $add$../../rtl/fft_engine.sv:261$25: $auto$alumacc.cc:485:replace_alu$645
  creating $alu cell for $add$../../rtl/fft_engine.sv:278$35: $auto$alumacc.cc:485:replace_alu$648
  creating $alu cell for $add$../../rtl/fft_engine.sv:447$107: $auto$alumacc.cc:485:replace_alu$651
  creating $alu cell for $add$../../rtl/fft_engine.sv:449$108: $auto$alumacc.cc:485:replace_alu$654
  creating $alu cell for $sub$../../rtl/fft_engine.sv:445$105: $auto$alumacc.cc:485:replace_alu$657
  creating $alu cell for $add$../../rtl/fft_engine.sv:349$50: $auto$alumacc.cc:485:replace_alu$660
  creating $alu cell for $sub$../../rtl/fft_engine.sv:353$52: $auto$alumacc.cc:485:replace_alu$663
  creating $alu cell for $add$../../rtl/fft_engine.sv:350$51: $auto$alumacc.cc:485:replace_alu$666
  creating $alu cell for $sub$../../rtl/fft_engine.sv:354$53: $auto$alumacc.cc:485:replace_alu$669
  creating $alu cell for $sub$../../rtl/fft_engine.sv:445$103: $auto$alumacc.cc:485:replace_alu$672
  created 15 $alu and 3 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).
Found 5 cells in module fft_engine that may be considered for resource sharing.
  Analyzing resource sharing options for $mul$../../rtl/fft_engine.sv:375$62 ($mul):
    Found cell that is never activated: $mul$../../rtl/fft_engine.sv:375$62
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$../../rtl/fft_engine.sv:374$61 ($mul):
    Found cell that is never activated: $mul$../../rtl/fft_engine.sv:374$61
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$../../rtl/fft_engine.sv:373$59 ($mul):
    Found cell that is never activated: $mul$../../rtl/fft_engine.sv:373$59
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$../../rtl/fft_engine.sv:372$58 ($mul):
    Found cell that is never activated: $mul$../../rtl/fft_engine.sv:372$58
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$../../rtl/fft_engine.sv:260$23 ($mul):
    Found cell that is never activated: $mul$../../rtl/fft_engine.sv:260$23
    Cell is never active. Sharing is pointless, we simply remove it.
Removing 5 cells in module fft_engine:
  Removing cell $mul$../../rtl/fft_engine.sv:260$23 ($mul).
  Removing cell $mul$../../rtl/fft_engine.sv:372$58 ($mul).
  Removing cell $mul$../../rtl/fft_engine.sv:373$59 ($mul).
  Removing cell $mul$../../rtl/fft_engine.sv:374$61 ($mul).
  Removing cell $mul$../../rtl/fft_engine.sv:375$62 ($mul).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.
<suppressed ~27 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.
<suppressed ~1 debug messages>

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
    Consolidated identical input bits for $mux cell $procmux$404:
      Old ports: A=3'110, B={ 2'10 $5\fft_next_state[2:0] }, Y=$4\fft_next_state[2:0]
      New ports: A=2'10, B={ 1'0 $5\fft_next_state[2:0] }, Y=$4\fft_next_state[2:0] [1:0]
      New connections: $4\fft_next_state[2:0] [2] = 1'1
  Optimizing cells in module \fft_engine.
Performed a total of 1 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_engine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_engine.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.

3.19.18. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using template $paramod$constmap:cab8e59385e0e1b28d45499e956dd3cb4ced2a48$paramod$cf390c05fba3251a3dd2474beef8eacf465e3e04\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$43e4b6e86c7d753773e473eb3ca9da3137a4ec01\_90_alu for cells of type $alu.
Using template $paramod$4723f36546de75c7b865d95396fc0936b66ab54e\_90_alu for cells of type $alu.
Using template $paramod$constmap:6a69073c5507984f9691ef50c08abe6960817259$paramod$3397fd401bca6d5a7933ed227da04f250cc57c1a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_90_alu for cells of type $alu.
Using template $paramod$dc6f880019a6bd7fa92cb40fac86c31d8bbc92e4\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$8f780356cb6cdb52f6a744190131b65634639c4e\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \stage_counter * \butterfly_spacing (12x12 bits, unsigned)
  add \butterfly_counter (12 bits, unsigned)
  add \butterfly_temp_real * \butterfly_twiddle_real (16x16 bits, unsigned)
  sub \butterfly_temp_imag * \butterfly_twiddle_imag (16x16 bits, unsigned)
  packed 16 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $or.
Using template $paramod$ee3d784672cdb1cb32d9a801a3af776716f16b74\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_and.
  add \butterfly_temp_real * \butterfly_twiddle_imag (16x16 bits, unsigned)
  add \butterfly_temp_imag * \butterfly_twiddle_real (16x16 bits, unsigned)
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$56f7ce6d87f8add68ca646dc02d7695a3189f8e5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
No more expansions possible.
<suppressed ~3601 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.
<suppressed ~4212 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
<suppressed ~342 debug messages>
Removed a total of 114 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 599 unused cells and 1790 unused wires.
<suppressed ~600 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\fft_engine' to `<abc-temp-dir>/input.blif'..
Extracted 5451 gates and 5740 wires to a netlist network with 288 inputs and 220 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      111
ABC RESULTS:               NOT cells:      230
ABC RESULTS:             ORNOT cells:      187
ABC RESULTS:               AND cells:      603
ABC RESULTS:                OR cells:      490
ABC RESULTS:              XNOR cells:      508
ABC RESULTS:              NAND cells:      176
ABC RESULTS:               NOR cells:      394
ABC RESULTS:            ANDNOT cells:     1455
ABC RESULTS:               XOR cells:     1084
ABC RESULTS:        internal signals:     5232
ABC RESULTS:           input signals:      288
ABC RESULTS:          output signals:      220
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_engine.
<suppressed ~35 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_engine'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_engine..
Removed 2 unused cells and 1518 unused wires.
<suppressed ~5 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \fft_engine

3.24.2. Analyzing design hierarchy..
Top module:  \fft_engine
Removed 0 unused modules.

3.25. Printing statistics.

=== fft_engine ===

   Number of wires:               5141
   Number of wire bits:           5903
   Number of public wires:          68
   Number of public wire bits:     658
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5706
     $_ANDNOT_                    1453
     $_AND_                        601
     $_DFFE_PN0P_                   75
     $_DFFE_PN1P_                    2
     $_DFFE_PP_                    387
     $_DFF_P_                        6
     $_MUX_                        111
     $_NAND_                       176
     $_NOR_                        390
     $_NOT_                        227
     $_ORNOT_                      187
     $_OR_                         485
     $_SDFF_PN0_                    18
     $_XNOR_                       507
     $_XOR_                       1081

3.26. Executing CHECK pass (checking for obvious problems).
Checking module fft_engine...
Found and reported 0 problems.

4. Printing statistics.

=== fft_engine ===

   Number of wires:               5141
   Number of wire bits:           5903
   Number of public wires:          68
   Number of public wire bits:     658
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5706
     $_ANDNOT_                    1453
     $_AND_                        601
     $_DFFE_PN0P_                   75
     $_DFFE_PN1P_                    2
     $_DFFE_PP_                    387
     $_DFF_P_                        6
     $_MUX_                        111
     $_NAND_                       176
     $_NOR_                        390
     $_NOT_                        227
     $_ORNOT_                      187
     $_OR_                         485
     $_SDFF_PN0_                    18
     $_XNOR_                       507
     $_XOR_                       1081

End of script. Logfile hash: f18b106f82, CPU: user 1.88s system 0.03s, MEM: 46.65 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 28% 34x opt_expr (0 sec), 18% 1x abc (0 sec), ...
