
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Running command `read_verilog -sv ../../rtl/fft_control.sv; hierarchy -top fft_control; synth -top fft_control; stat' --

1. Executing Verilog-2005 frontend: ../../rtl/fft_control.sv
Parsing SystemVerilog input from `../../rtl/fft_control.sv' to AST representation.
Generating RTLIL representation for module `\fft_control'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \fft_control

2.2. Analyzing design hierarchy..
Top module:  \fft_control
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \fft_control

3.1.2. Analyzing design hierarchy..
Top module:  \fft_control
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../../rtl/fft_control.sv:201$16 in module fft_control.
Marked 6 switch rules as full_case in process $proc$../../rtl/fft_control.sv:143$8 in module fft_control.
Marked 4 switch rules as full_case in process $proc$../../rtl/fft_control.sv:128$5 in module fft_control.
Marked 5 switch rules as full_case in process $proc$../../rtl/fft_control.sv:0$3 in module fft_control.
Marked 2 switch rules as full_case in process $proc$../../rtl/fft_control.sv:68$1 in module fft_control.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n_i in `\fft_control.$proc$../../rtl/fft_control.sv:201$16'.
Found async reset \reset_n_i in `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
Found async reset \reset_n_i in `\fft_control.$proc$../../rtl/fft_control.sv:128$5'.
Found async reset \reset_n_i in `\fft_control.$proc$../../rtl/fft_control.sv:68$1'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~20 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fft_control.$proc$../../rtl/fft_control.sv:201$16'.
     1/1: $0\fft_busy_reg[0:0]
Creating decoders for process `\fft_control.$proc$../../rtl/fft_control.sv:0$15'.
Creating decoders for process `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
     1/5: $0\rescale_pending[0:0]
     2/5: $0\overflow_pending[0:0]
     3/5: $0\buffer_swap_pending[0:0]
     4/5: $0\fft_error_pending[0:0]
     5/5: $0\fft_done_pending[0:0]
Creating decoders for process `\fft_control.$proc$../../rtl/fft_control.sv:128$5'.
     1/1: $0\buffer_active_reg[1:0]
Creating decoders for process `\fft_control.$proc$../../rtl/fft_control.sv:0$3'.
     1/5: $5\ctrl_next_state[2:0]
     2/5: $4\ctrl_next_state[2:0]
     3/5: $3\ctrl_next_state[2:0]
     4/5: $2\ctrl_next_state[2:0]
     5/5: $1\ctrl_next_state[2:0]
Creating decoders for process `\fft_control.$proc$../../rtl/fft_control.sv:68$1'.
     1/1: $0\ctrl_state[2:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fft_control.\int_status_reg' from process `\fft_control.$proc$../../rtl/fft_control.sv:0$15'.
No latch inferred for signal `\fft_control.\ctrl_next_state' from process `\fft_control.$proc$../../rtl/fft_control.sv:0$3'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fft_control.\fft_busy_reg' using process `\fft_control.$proc$../../rtl/fft_control.sv:201$16'.
  created $adff cell `$procdff$115' with positive edge clock and negative level reset.
Creating register for signal `\fft_control.\fft_done_pending' using process `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
  created $adff cell `$procdff$116' with positive edge clock and negative level reset.
Creating register for signal `\fft_control.\fft_error_pending' using process `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
  created $adff cell `$procdff$117' with positive edge clock and negative level reset.
Creating register for signal `\fft_control.\buffer_swap_pending' using process `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
  created $adff cell `$procdff$118' with positive edge clock and negative level reset.
Creating register for signal `\fft_control.\overflow_pending' using process `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
  created $adff cell `$procdff$119' with positive edge clock and negative level reset.
Creating register for signal `\fft_control.\rescale_pending' using process `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
  created $adff cell `$procdff$120' with positive edge clock and negative level reset.
Creating register for signal `\fft_control.\buffer_active_reg' using process `\fft_control.$proc$../../rtl/fft_control.sv:128$5'.
  created $adff cell `$procdff$121' with positive edge clock and negative level reset.
Creating register for signal `\fft_control.\ctrl_state' using process `\fft_control.$proc$../../rtl/fft_control.sv:68$1'.
  created $adff cell `$procdff$122' with positive edge clock and negative level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `fft_control.$proc$../../rtl/fft_control.sv:201$16'.
Removing empty process `fft_control.$proc$../../rtl/fft_control.sv:0$15'.
Found and cleaned up 10 empty switches in `\fft_control.$proc$../../rtl/fft_control.sv:143$8'.
Removing empty process `fft_control.$proc$../../rtl/fft_control.sv:143$8'.
Found and cleaned up 4 empty switches in `\fft_control.$proc$../../rtl/fft_control.sv:128$5'.
Removing empty process `fft_control.$proc$../../rtl/fft_control.sv:128$5'.
Found and cleaned up 5 empty switches in `\fft_control.$proc$../../rtl/fft_control.sv:0$3'.
Removing empty process `fft_control.$proc$../../rtl/fft_control.sv:0$3'.
Found and cleaned up 1 empty switch in `\fft_control.$proc$../../rtl/fft_control.sv:68$1'.
Removing empty process `fft_control.$proc$../../rtl/fft_control.sv:68$1'.
Cleaned up 20 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.
<suppressed ~3 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..
Removed 4 unused cells and 42 unused wires.
<suppressed ~5 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module fft_control...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$19: \rescale_pending -> 1'0
      Replacing known input bits on port A of cell $procmux$24: \overflow_pending -> 1'0
      Replacing known input bits on port A of cell $procmux$29: \buffer_swap_pending -> 1'0
      Replacing known input bits on port A of cell $procmux$34: \fft_error_pending -> 1'0
      Replacing known input bits on port A of cell $procmux$39: \fft_done_pending -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$101.
    dead port 2/2 on $mux $procmux$63.
    dead port 1/2 on $mux $procmux$66.
    dead port 2/2 on $mux $procmux$68.
    dead port 1/2 on $mux $procmux$78.
    dead port 2/2 on $mux $procmux$80.
    dead port 2/2 on $mux $procmux$89.
Removed 7 multiplexer ports.
<suppressed ~7 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_control.
  Optimizing cells in module \fft_control.
Performed a total of 5 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_control.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking fft_control.ctrl_state as FSM state register:
    Users of register don't seem to benefit from recoding.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_control.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$122 ($adff) from module fft_control (D = $0\ctrl_state[2:0], Q = \ctrl_state).
Adding EN signal on $procdff$121 ($adff) from module fft_control (D = $0\buffer_active_reg[1:0], Q = \buffer_active_reg).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.
<suppressed ~1 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_control.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from mux cell fft_control.$procmux$61 ($mux).
Removed top 1 bits (of 3) from port B of cell fft_control.$procmux$108_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell fft_control.$procmux$109_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell fft_control.$procmux$110_CMP0 ($eq).
Removed top 2 bits (of 3) from wire fft_control.$5\ctrl_next_state[2:0].
Removed top 3 bits (of 8) from wire fft_control.int_status_reg.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fft_control:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_control.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.
<suppressed ~9 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_control.
    Consolidated identical input bits for $mux cell $procmux$87:
      Old ports: A={ 2'10 $4\ctrl_next_state[2:0] [0] }, B=3'110, Y=$3\ctrl_next_state[2:0]
      New ports: A={ 1'0 $4\ctrl_next_state[2:0] [0] }, B=2'10, Y=$3\ctrl_next_state[2:0] [1:0]
      New connections: $3\ctrl_next_state[2:0] [2] = 1'1
  Optimizing cells in module \fft_control.
Performed a total of 1 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_control.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.19.18. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$56f7ce6d87f8add68ca646dc02d7695a3189f8e5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~128 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.
<suppressed ~42 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..
Removed 4 unused cells and 51 unused wires.
<suppressed ~5 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\fft_control' to `<abc-temp-dir>/input.blif'..
Extracted 54 gates and 74 wires to a netlist network with 19 inputs and 12 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               AND cells:        6
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:                OR cells:       14
ABC RESULTS:               MUX cells:        2
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:        internal signals:       43
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       12
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_control.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_control'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_control..
Removed 0 unused cells and 61 unused wires.
<suppressed ~2 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \fft_control

3.24.2. Analyzing design hierarchy..
Top module:  \fft_control
Removed 0 unused modules.

3.25. Printing statistics.

=== fft_control ===

   Number of wires:                 71
   Number of wire bits:            107
   Number of public wires:          28
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $_ANDNOT_                      13
     $_AND_                          6
     $_DFFE_PN0P_                    4
     $_DFF_PN0_                      6
     $_MUX_                          2
     $_NAND_                         1
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        4
     $_OR_                          14

3.26. Executing CHECK pass (checking for obvious problems).
Checking module fft_control...
Found and reported 0 problems.

4. Printing statistics.

=== fft_control ===

   Number of wires:                 71
   Number of wire bits:            107
   Number of public wires:          28
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $_ANDNOT_                      13
     $_AND_                          6
     $_DFFE_PN0P_                    4
     $_DFF_PN0_                      6
     $_MUX_                          2
     $_NAND_                         1
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        4
     $_OR_                          14

End of script. Logfile hash: 2d5ea5803b, CPU: user 0.12s system 0.00s, MEM: 13.06 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 35% 1x abc (0 sec), 17% 16x opt_expr (0 sec), ...
